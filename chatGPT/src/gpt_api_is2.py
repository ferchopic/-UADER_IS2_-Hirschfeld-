import sys

import openai

# Set your OpenAI API key
openai.api_key = "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"

# Global variable to store the last query and the query buffer
LAST_QUERY = ""
QUERY_BUFFER = []

def get_response(input_text):
    """
    Get a response from the OpenAI chatGPT model.

    Args:
        input_text (str): The user's query.

    Returns:
        str: The response generated by the chatGPT model.
    """
    try:
        # Combine the last query with all previous queries in the buffer
        total_query = ' '.join(QUERY_BUFFER + [input_text])

        # Invoke the chatGPT API to get a response
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-0613",
            messages=[{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": total_query}],
            max_tokens=50,
            temperature=0.7
        )
        # Add the last query to the buffer
        QUERY_BUFFER.append(input_text)

        return response.choices[0].message['content']
    except openai.OpenAIError as e:
        print("Error getting chatGPT response:", e)
        return None
    except Exception as e:
        print("Unexpected error getting response:", e)
        return None

def main():
    """
    Main function to handle user interaction.
    """
    global LAST_QUERY  # Declare that the global variable will be modified within this function

    conversation_mode = "--conversation" in sys.argv

    while True:
        try:
            # Accept a user query
            query = input("You: ")

            # Check if the query has text
            if query.strip():
                try:
                    # Store the query as the last query made
                    LAST_QUERY = query

                    # Invoke the chatGPT API with the user's query
                    response = get_response(query)

                    if response is not None:
                        # Print the chatGPT response
                        print("chatGPT:", response)
                    else:
                        print("Unable to get a response.")
                except Exception as e:
                    print("Error handling query:", e)
            else:
                print("Please enter a valid query.")

            # If conversation mode is activated, allow the user to edit the last query
            if conversation_mode:
                try:
                    edited_query = input("You (Edit, Enter to send): " + LAST_QUERY)
                    if edited_query.strip():
                        LAST_QUERY = edited_query
                except KeyboardInterrupt:
                    print("\nGoodbye!")
                    break

        except KeyboardInterrupt:
            print("\nGoodbye!")
            break
        
if __name__ == "__main__":
    main()
